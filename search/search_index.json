{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Hix","text":"<p>Hix is a flexible, template-driven code generator for developers who love clean, structured automation.**</p> <p>Whether you're generating classes, config files, or scaffolding code, Hix combines the power of JSON models and expressive templates to deliver clean, readable output.</p>"},{"location":"#what-can-hix-do","title":"What Can Hix Do?","text":"<ul> <li>\ud83e\udde0 Generate code from structured models</li> <li>\ud83d\udd01 Loop over model properties with <code>[[prop]]</code></li> <li>\u2753 Use <code>[[if]]</code> and <code>[[else]]</code> for conditional rendering</li> <li>\ud83d\udd24 Transform values using <code>[[upper]]</code>, <code>[[lower]]</code>, and <code>[[snake_case]]</code></li> <li>\ud83e\uddea Validate behavior using golden tests</li> <li>\ud83c\udfa8 Highlight templates with editor grammar</li> <li>\ud83e\ude9f Install cleanly on Windows with a wizard installer</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<p>Given this model:</p> <pre><code>{\n  \"className\": \"User\",\n  \"properties\": [\n    { \"name\": \"Name\", \"type\": \"string\" },\n    { \"name\": \"IsAdmin\", \"type\": \"bool\" }\n  ]\n}\n</code></pre> <p>And this template:</p> <pre><code>public class [[model.className]] {\n[[prop]]\n  [[if prop.type=bool]]\n    public bool [[prop.name]];\n  [[else]]\n    public [[prop.type]] [[snake_case prop.name]];\n  [[/if]]\n[[/prop]]\n}\n</code></pre> <p>Hix will generate:</p> <pre><code>public class User {\n  public string name;\n  public bool IsAdmin;\n}\n</code></pre>"},{"location":"#try-it","title":"Try It","text":"<pre><code>hix template.hix model.json\n</code></pre> <p>Explore more in: - <code>usage.md</code> for CLI details - <code>templates.md</code> for syntax reference - <code>installer.md</code> if you're on Windows</p> <p>Happy generating! \ud83d\ude80</p>"},{"location":"advanced/","title":"Advanced Examples","text":"<p>This page includes more advanced usage scenarios of Hix templates, showing how you can structure templates and models for more realistic code generation tasks.</p>"},{"location":"advanced/#1-generating-a-dto-with-attributes","title":"1. Generating a DTO with Attributes","text":""},{"location":"advanced/#modeljson","title":"model.json","text":"<pre><code>{\n  \"className\": \"ProductDto\",\n  \"properties\": [\n    { \"name\": \"Id\", \"type\": \"int\" },\n    { \"name\": \"Name\", \"type\": \"string\" },\n    { \"name\": \"IsAvailable\", \"type\": \"bool\" },\n    { \"name\": \"CreatedDate\", \"type\": \"DateTime\" }\n  ]\n}\n</code></pre>"},{"location":"advanced/#templatehix","title":"template.hix","text":"<pre><code>public class [[model.className]] {\n[[prop]]\n  [JsonProperty(\"[[snake_case prop.name]]\")]\n  [[if prop.type=bool]]\n    public bool [[prop.name]] { get; set; }\n  [[else]]\n    public [[prop.type]] [[prop.name]] { get; set; }\n  [[/if]]\n[[/prop]]\n}\n</code></pre>"},{"location":"advanced/#output","title":"Output","text":"<pre><code>public class ProductDto {\n  [JsonProperty(\"id\")]\n  public int Id { get; set; }\n\n  [JsonProperty(\"name\")]\n  public string Name { get; set; }\n\n  [JsonProperty(\"is_available\")]\n  public bool IsAvailable { get; set; }\n\n  [JsonProperty(\"created_date\")]\n  public DateTime CreatedDate { get; set; }\n}\n</code></pre>"},{"location":"advanced/#2-filtering-by-property-type","title":"2. Filtering by Property Type","text":""},{"location":"advanced/#templatehix_1","title":"template.hix","text":"<pre><code>// Booleans only\n[[prop type=bool]]\n  public bool [[prop.name]]Flag;\n[[/prop]]\n</code></pre> <p>This will render only the properties in the model that have type <code>bool</code>.</p>"},{"location":"advanced/#3-excluding-a-property","title":"3. Excluding a Property","text":"<p>You can use the <code>[[prop ignore=...]]</code> syntax to skip rendering specific fields, such as identifiers or audit fields.</p>"},{"location":"advanced/#modeljson_1","title":"model.json","text":"<pre><code>{\n  \"className\": \"Customer\",\n  \"properties\": [\n    { \"name\": \"Id\", \"type\": \"Guid\" },\n    { \"name\": \"FullName\", \"type\": \"string\" },\n    { \"name\": \"Email\", \"type\": \"string\" }\n  ]\n}\n</code></pre>"},{"location":"advanced/#templatehix_2","title":"template.hix","text":"<pre><code>[[prop ignore=Id]]\n  public [[prop.type]] [[prop.name]];\n[[/prop]]\n</code></pre>"},{"location":"advanced/#output_1","title":"Output","text":"<pre><code>public string FullName;\npublic string Email;\n</code></pre> <p>This renders all properties except <code>Id</code>. This is useful when you want to skip certain fields during generation (e.g., primary keys or audit fields).</p> <p>You can combine all these patterns to build flexible templates for generating DTOs, API contracts, form models, or any other structured output.</p>"},{"location":"grammar/","title":"Syntax Highlighting Grammar","text":"<p>Hix provides a grammar generator for editors like VS Code or Sublime Text using the TextMate format.</p>"},{"location":"grammar/#generating-the-grammar","title":"Generating the Grammar","text":"<p>Run the following command:</p> <pre><code>hix --gen-grammar hix.tmLanguage.json\n</code></pre> <p>This generates a <code>hix.tmLanguage.json</code> file that can be used in editor extensions or custom themes.</p>"},{"location":"grammar/#supported-tokens","title":"Supported Tokens","text":"<p>Hix grammar supports the following highlights:</p> <ul> <li><code>[[prop]]</code>, <code>[[/prop]]</code>: property block keywords</li> <li><code>[[if ...]]</code>, <code>[[else]]</code>, <code>[[/if]]</code>: conditional blocks</li> <li><code>[[prop.name]]</code>, <code>[[prop.type]]</code>, <code>[[model.className]]</code>: variables</li> <li><code>[[upper ...]]</code>, <code>[[lower ...]]</code>, <code>[[snake_case ...]]</code>: functions</li> </ul>"},{"location":"grammar/#using-in-vs-code","title":"Using in VS Code","text":"<ol> <li>Copy <code>hix.tmLanguage.json</code> into your VS Code extension or custom grammar folder</li> <li>Add it to the <code>contributes.grammars</code> section of your <code>package.json</code></li> <li>Reload your editor</li> </ol>"},{"location":"grammar/#future-plans","title":"Future Plans","text":"<ul> <li>Language Server Protocol (LSP) support</li> <li>Live preview pane for rendered templates</li> <li>Validation &amp; auto-completion</li> </ul>"},{"location":"real-world-usecase/","title":"Real-World Use Case: Full Stack Model Automation","text":"<p>Hix was designed to solve a very common problem in modern development: reducing boilerplate when creating new screens or entities across a full stack application.</p>"},{"location":"real-world-usecase/#the-problem","title":"The Problem","text":"<p>When you add a new feature like a <code>Customer</code> or <code>Product</code>, you often have to:</p> <ul> <li>Create a backend model class</li> <li>Write a database table or ORM definition</li> <li>Build a REST API handler</li> <li>Create an HTML form</li> <li>Add JS for validation or interactivity</li> <li>Define styles, test files, etc.</li> </ul> <p>That's 5\u201310 files per model, most of which follow a repeatable structure.</p>"},{"location":"real-world-usecase/#the-hix-solution","title":"The Hix Solution","text":"<p>Hix lets you define templates for each type of file \u2014 HTML, Python, TypeScript, SQL, etc. Then, with a single command, it can generate all those files for a given model.</p>"},{"location":"real-world-usecase/#example","title":"Example:","text":"<p>Given: - <code>Customer.json</code> (model) - Templates:   - <code>customer.model.py.hix</code>   - <code>customer.form.html.hix</code>   - <code>customer.api.js.hix</code>   - <code>customer.sql.hix</code></p> <p>You can run:</p> <pre><code>hix customer.model.py.hix Customer.json &gt; src/models/customer.py\nhix customer.form.html.hix Customer.json &gt; frontend/forms/customer.html\nhix customer.api.js.hix Customer.json &gt; api/customer.js\nhix customer.sql.hix Customer.json &gt; migrations/create_customer.sql\n</code></pre> <p>Or automate it with a script.</p>"},{"location":"real-world-usecase/#bash-script-example","title":"Bash Script Example","text":"<pre><code>#!/bin/bash\nMODEL=$1\n\nhix templates/model.py.hix models/$MODEL.json &gt; output/$MODEL.py\nhix templates/form.html.hix models/$MODEL.json &gt; output/$MODEL.html\nhix templates/api.js.hix models/$MODEL.json &gt; output/$MODEL.js\nhix templates/schema.sql.hix models/$MODEL.json &gt; output/$MODEL.sql\n</code></pre> <p>Usage:</p> <pre><code>./generate.sh Customer\n</code></pre>"},{"location":"real-world-usecase/#powershell-example","title":"PowerShell Example","text":"<pre><code>param([string]$Model)\n\nhix templates\\model.py.hix models\\$Model.json &gt; output\\$Model.py\nhix templates\\form.html.hix models\\$Model.json &gt; output\\$Model.html\nhix templates\\api.js.hix models\\$Model.json &gt; output\\$Model.js\nhix templates\\schema.sql.hix models\\$Model.json &gt; output\\$Model.sql\n</code></pre> <p>Usage:</p> <pre><code>.\\generate.ps1 -Model Customer\n</code></pre>"},{"location":"real-world-usecase/#benefits","title":"Benefits","text":"<ul> <li>\ud83d\udd01 Consistent code structure across files and teams</li> <li>\ud83e\udde0 Fewer manual errors when creating boilerplate</li> <li>\u26a1 Fast prototyping of new modules or features</li> <li>\ud83e\udde9 Decouples templates from data so you can focus on the logic</li> </ul> <p>With Hix, you design your code scaffolding once \u2014 and reuse it forever.</p>"},{"location":"roadmap/","title":"Roadmap","text":"<p>This document outlines upcoming features and ideas for future Hix releases.</p>"},{"location":"roadmap/#completed-in-v01","title":"\u2705 Completed in v0.1","text":"<ul> <li><code>[[prop]]</code> and filters</li> <li><code>[[if]]</code> / <code>[[else]]</code> conditionals</li> <li><code>[[upper]]</code>, <code>[[lower]]</code>, <code>[[snake_case]]</code> functions</li> <li>AST-based rendering</li> <li>Golden tests</li> <li>Grammar generation for syntax highlighting</li> <li>Windows installer with wizard UI and PATH integration</li> </ul>"},{"location":"roadmap/#planned-for-v02","title":"\ud83e\udde9 Planned for v0.2","text":"<ul> <li><code>[[include filename]]</code> for reusable template parts</li> <li>Configurable output file paths via CLI</li> <li>Command-line options: <code>--out</code>, <code>--format</code>, <code>--verbose</code></li> <li>More filters (e.g., <code>prop.required=true</code>)</li> <li>Real comment support in templates</li> </ul>"},{"location":"roadmap/#testing-ci","title":"\ud83e\uddea Testing &amp; CI","text":"<ul> <li>GitHub Actions for auto-testing PRs</li> <li>Validate golden outputs</li> <li>Run on Windows/Linux builds</li> </ul>"},{"location":"roadmap/#stretch-goals","title":"\ud83e\udde0 Stretch Goals","text":"<ul> <li>Language Server Protocol (LSP) integration</li> <li>VS Code extension</li> <li>Live preview while editing templates</li> <li>Web-based playground UI</li> </ul> <p>Have an idea? Open an issue or submit a PR!</p>"},{"location":"templates/","title":"Template Syntax","text":"<p>Hix templates support a rich tag syntax for rendering model-based structures. Tags are enclosed in double square brackets <code>[[ ]]</code>.</p>"},{"location":"templates/#model-tags","title":"Model Tags","text":"<ul> <li><code>[[model.className]]</code>: Injects the model's class name.</li> </ul>"},{"location":"templates/#property-tags-inside-prop","title":"Property Tags (inside <code>[[prop]]</code>)","text":"<ul> <li><code>[[prop.name]]</code>: Injects the name of the property</li> <li><code>[[prop.type]]</code>: Injects the property type</li> </ul>"},{"location":"templates/#control-flow","title":"Control Flow","text":""},{"location":"templates/#loops","title":"Loops","text":"<pre><code>[[prop]]\n  [[prop.type]] [[prop.name]];\n[[/prop]]\n</code></pre>"},{"location":"templates/#optional-filters","title":"Optional filters:","text":"<pre><code>[[prop type=bool]]\n[[prop ignore=Id]]\n</code></pre>"},{"location":"templates/#conditionals","title":"Conditionals","text":"<pre><code>[[if prop.type=bool]]\n  // do something\n[[else]]\n  // do something else\n[[/if]]\n</code></pre>"},{"location":"templates/#functions","title":"Functions","text":"<p>Apply transformations to values:</p> <pre><code>[[upper prop.name]]     =&gt; MYFIELD\n[[lower prop.name]]     =&gt; myfield\n[[snake_case prop.name]] =&gt; my_field\n</code></pre>"},{"location":"templates/#comments","title":"Comments","text":"<p>Hix doesn't support comments in template syntax directly yet, but you can use:</p> <pre><code>// [[prop.name]] is the name of the field\n</code></pre>"},{"location":"templates/#example-template","title":"Example Template","text":"<pre><code>public class [[model.className]] {\n[[prop]]\n  [[if prop.type=bool]]\n    public bool [[prop.name]];\n  [[else]]\n    public [[prop.type]] [[prop.name]];\n  [[/if]]\n[[/prop]]\n}\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#running-hix","title":"Running Hix","text":"<p>Before running the command, make sure you have created two files:</p> <ul> <li><code>template.hix</code>: your Hix template</li> <li><code>model.json</code>: your input data model</li> </ul> <p>Once installed, you can use Hix via the command line to render templates with your model data:</p> <pre><code>hix template.hix model.json\n</code></pre> <p>This will parse <code>template.hix</code>, apply values from <code>model.json</code>, and output the result to your terminal.</p>"},{"location":"usage/#example-input-files","title":"Example Input Files","text":""},{"location":"usage/#modeljson","title":"model.json","text":"<pre><code>{\n  \"className\": \"User\",\n  \"properties\": [\n    { \"name\": \"Name\", \"type\": \"string\" },\n    { \"name\": \"IsAdmin\", \"type\": \"bool\" }\n  ]\n}\n</code></pre>"},{"location":"usage/#templatehix","title":"template.hix","text":"<pre><code>public class [[model.className]] {\n[[prop]]\n  [[if prop.type=bool]]\n    public bool [[prop.name]];\n  [[else]]\n    public [[prop.type]] [[snake_case prop.name]];\n  [[/if]]\n[[/prop]]\n}\n</code></pre>"},{"location":"usage/#output","title":"Output","text":"<pre><code>public class User {\n  public string name;\n  public bool IsAdmin;\n}\n</code></pre>"},{"location":"usage/#command-line-arguments","title":"Command-Line Arguments","text":"<p>When you run <code>hix template.hix model.json</code>, the tool uses:</p> <ul> <li>The template file's extension (e.g., <code>.hix</code>, <code>.cs.hix</code>, <code>.html.hix</code>) to determine the output file extension.</li> <li>The model's <code>className</code> as the base name for the output file.</li> </ul> <p>For example:</p> <pre><code>hix template.cs.hix Person.json\n</code></pre> <p>Will produce:</p> <pre><code>Person.cs\n</code></pre> <p>The CLI accepts two positional arguments:</p> <p>The CLI accepts two positional arguments:</p> <ol> <li>template file (e.g. <code>template.hix</code>)</li> <li>model file (e.g. <code>model.json</code>)</li> </ol>"},{"location":"usage/#windows-installer-support","title":"Windows Installer Support","text":"<p>If you installed Hix using the Windows setup wizard, the <code>hix</code> command will be available in any terminal.</p> <p>You may need to restart your terminal session after installation to ensure the <code>PATH</code> update is active.</p>"}]}