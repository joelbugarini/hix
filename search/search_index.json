{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hix - A Code Generation Tool for Clean Architecture","text":"<p>Hix is a powerful code generation tool designed to help you implement clean architecture patterns in your projects. It uses templates and models to generate consistent, well-structured code across different layers of your application.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Template-based Code Generation: Write templates once, generate code for multiple models</li> <li>Clean Architecture Support: Built-in support for Domain, Application, Infrastructure, and Presentation layers</li> <li>Flexible Template Language: Simple yet powerful template syntax with conditionals and loops</li> <li>Model-driven Development: Define your models in JSON and generate code automatically</li> <li>CLI Interface: Easy-to-use command-line interface with initialization and help features</li> <li>Customizable Architecture: Support for different architecture patterns (Clean, Onion, Hexagonal)</li> <li>Extensible: Add your own templates and customize the generation process</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li> <p>Install Hix:    <code>bash    stack install hix</code></p> </li> <li> <p>Initialize a Project:    <code>bash    mkdir my-project    cd my-project    hix init</code></p> </li> <li> <p>Create a Model:    <code>json    {      \"className\": \"User\",      \"properties\": [        { \"name\": \"Id\", \"type\": \"int\" },        { \"name\": \"Name\", \"type\": \"string\" }      ]    }</code></p> </li> <li> <p>Generate Code:    <code>bash    hix User.json</code></p> </li> </ol>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>CLI Commands - Learn about available commands and options</li> <li>Usage Guide - Get started with basic usage</li> <li>Template Syntax - Understand the template language</li> <li>Advanced Features - Explore advanced capabilities</li> <li>Templates - Learn about creating and using templates</li> <li>Real-world Use Cases - See how Hix is used in practice</li> <li>Roadmap - Future plans and upcoming features</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Use <code>hix help</code> for basic command information</li> <li>Use <code>hix man</code> for detailed documentation</li> <li>Check the documentation for more information</li> <li>Report issues on our GitHub repository</li> </ul>"},{"location":"#license","title":"License","text":"<p>Hix is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"advanced/","title":"Advanced Examples","text":"<p>This page includes more advanced usage scenarios of Hix templates, showing how you can structure templates and models for more realistic code generation tasks.</p>"},{"location":"advanced/#1-generating-a-dto-with-attributes","title":"1. Generating a DTO with Attributes","text":""},{"location":"advanced/#modeljson","title":"model.json","text":"<pre><code>{\n  \"className\": \"ProductDto\",\n  \"properties\": [\n    { \"name\": \"Id\", \"type\": \"int\" },\n    { \"name\": \"Name\", \"type\": \"string\" },\n    { \"name\": \"IsAvailable\", \"type\": \"bool\" },\n    { \"name\": \"CreatedDate\", \"type\": \"DateTime\" }\n  ]\n}\n</code></pre>"},{"location":"advanced/#templatehix","title":"template.hix","text":"<pre><code>public class [[model.className]] {\n[[prop]]\n  [JsonProperty(\"[[snake_case prop.name]]\")]\n  [[if prop.type=bool]]\n    public bool [[prop.name]] { get; set; }\n  [[else]]\n    public [[prop.type]] [[prop.name]] { get; set; }\n  [[/if]]\n[[/prop]]\n}\n</code></pre>"},{"location":"advanced/#output","title":"Output","text":"<pre><code>public class ProductDto {\n  [JsonProperty(\"id\")]\n  public int Id { get; set; }\n\n  [JsonProperty(\"name\")]\n  public string Name { get; set; }\n\n  [JsonProperty(\"is_available\")]\n  public bool IsAvailable { get; set; }\n\n  [JsonProperty(\"created_date\")]\n  public DateTime CreatedDate { get; set; }\n}\n</code></pre>"},{"location":"advanced/#2-filtering-by-property-type","title":"2. Filtering by Property Type","text":""},{"location":"advanced/#templatehix_1","title":"template.hix","text":"<pre><code>// Booleans only\n[[prop type=bool]]\n  public bool [[prop.name]]Flag;\n[[/prop]]\n</code></pre> <p>This will render only the properties in the model that have type <code>bool</code>.</p>"},{"location":"advanced/#3-excluding-a-property","title":"3. Excluding a Property","text":"<p>You can use the <code>[[prop ignore=...]]</code> syntax to skip rendering specific fields, such as identifiers or audit fields.</p>"},{"location":"advanced/#modeljson_1","title":"model.json","text":"<pre><code>{\n  \"className\": \"Customer\",\n  \"properties\": [\n    { \"name\": \"Id\", \"type\": \"Guid\" },\n    { \"name\": \"FullName\", \"type\": \"string\" },\n    { \"name\": \"Email\", \"type\": \"string\" }\n  ]\n}\n</code></pre>"},{"location":"advanced/#templatehix_2","title":"template.hix","text":"<pre><code>[[prop ignore=Id]]\n  public [[prop.type]] [[prop.name]];\n[[/prop]]\n</code></pre>"},{"location":"advanced/#output_1","title":"Output","text":"<pre><code>public string FullName;\npublic string Email;\n</code></pre> <p>This renders all properties except <code>Id</code>. This is useful when you want to skip certain fields during generation (e.g., primary keys or audit fields).</p> <p>You can combine all these patterns to build flexible templates for generating DTOs, API contracts, form models, or any other structured output.</p>"},{"location":"cli/","title":"CLI Commands","text":"<p>Hix provides a command-line interface with several commands to help you manage your code generation workflow.</p>"},{"location":"cli/#basic-commands","title":"Basic Commands","text":""},{"location":"cli/#hix-init","title":"<code>hix init</code>","text":"<p>Initializes a new hix project by creating the necessary directory structure and configuration files.</p> <pre><code>hix init\n</code></pre> <p>This command: - Creates a <code>.hix</code> directory in your current working directory - Sets up the default directory structure:   <code>.hix/   \u251c\u2500\u2500 config.yaml           # Configuration file   \u251c\u2500\u2500 .gitignore           # Git ignore rules for generated files   \u251c\u2500\u2500 models/              # Directory for model files   \u251c\u2500\u2500 output/              # Directory for generated code   \u2502   \u251c\u2500\u2500 Domain/         # Domain layer output   \u2502   \u251c\u2500\u2500 Application/    # Application layer output   \u2502   \u251c\u2500\u2500 Infrastructure/ # Infrastructure layer output   \u2502   \u2514\u2500\u2500 Presentation/   # Presentation layer output   \u2514\u2500\u2500 templates/          # Directory for template files</code> - Creates a default <code>config.yaml</code> with clean architecture layers - Prompts you to configure templates for each layer</p>"},{"location":"cli/#hix-help","title":"<code>hix help</code>","text":"<p>Shows the basic help message with available commands and options.</p> <pre><code>hix help\n# or\nhix --help\n</code></pre>"},{"location":"cli/#hix-man","title":"<code>hix man</code>","text":"<p>Shows the detailed manual with comprehensive documentation.</p> <pre><code>hix man\n</code></pre>"},{"location":"cli/#hix-version","title":"<code>hix version</code>","text":"<p>Displays the current version of hix.</p> <pre><code>hix version\n# or\nhix --version\n</code></pre>"},{"location":"cli/#code-generation","title":"Code Generation","text":""},{"location":"cli/#basic-usage","title":"Basic Usage","text":"<p>To generate code from a model file:</p> <pre><code>hix model.json\n</code></pre> <p>This will: 1. Load the model from <code>model.json</code> 2. Read the configuration from <code>.hix/config.yaml</code> 3. Generate code for each layer according to the templates 4. Output the generated files in their respective layer directories</p>"},{"location":"cli/#interactive-mode","title":"Interactive Mode","text":"<p>If you run hix without arguments, it will prompt you for the model name:</p> <pre><code>hix\n# Then enter the model name when prompted\n</code></pre>"},{"location":"cli/#configuration","title":"Configuration","text":"<p>The <code>config.yaml</code> file created by <code>hix init</code> contains the following structure:</p> <pre><code>architecture: clean\noutput_root: ./src\nlayers:\n  - name: Domain\n    path: ./src/Domain\n    description: Core business logic and entities\n    templates: []\n  - name: Application\n    path: ./src/Application\n    description: Application services and use cases\n    templates: []\n  - name: Infrastructure\n    path: ./src/Infrastructure\n    description: External interfaces and implementations\n    templates: []\n  - name: Presentation\n    path: ./src/Presentation\n    description: User interface and API endpoints\n    templates: []\n</code></pre> <p>You can customize this configuration by: 1. Editing the <code>config.yaml</code> file directly 2. Adding templates to each layer 3. Changing the output paths 4. Modifying the architecture type</p>"},{"location":"cli/#examples","title":"Examples","text":""},{"location":"cli/#initialize-a-new-project","title":"Initialize a New Project","text":"<pre><code>mkdir my-project\ncd my-project\nhix init\n</code></pre>"},{"location":"cli/#generate-code-from-a-model","title":"Generate Code from a Model","text":"<pre><code># Create a model file\necho '{\n  \"className\": \"User\",\n  \"properties\": [\n    { \"name\": \"Id\", \"type\": \"int\" },\n    { \"name\": \"Name\", \"type\": \"string\" }\n  ]\n}' &gt; User.json\n\n# Generate code\nhix User.json\n</code></pre>"},{"location":"cli/#view-help","title":"View Help","text":"<pre><code>hix help\n</code></pre>"},{"location":"cli/#view-manual","title":"View Manual","text":"<pre><code>hix man\n</code></pre>"},{"location":"development/","title":"Development Guide","text":"<p>This guide is for developers who want to contribute to Hix or work with the source code.</p>"},{"location":"development/#building-from-source","title":"Building from Source","text":""},{"location":"development/#using-stack","title":"Using Stack","text":"<pre><code>stack build\nstack install\n</code></pre>"},{"location":"development/#using-cabal","title":"Using Cabal","text":"<pre><code>cabal build\ncabal install\n</code></pre>"},{"location":"development/#development-commands","title":"Development Commands","text":""},{"location":"development/#building","title":"Building","text":"<pre><code>stack build\n</code></pre>"},{"location":"development/#running-tests","title":"Running Tests","text":"<pre><code>stack test\n</code></pre>"},{"location":"development/#generating-template","title":"Generating Template","text":"<pre><code>stack exec hix template.cs.hix Person.json\n</code></pre>"},{"location":"development/#syntax-highlighting","title":"Syntax Highlighting","text":"<p>To generate and install syntax highlighting for VS Code:</p> <pre><code>stack exec hix -- --gen-grammar util/syntaxes/hix.tmLanguage.json\nvsce package\ncode --install-extension hix-syntax-0.0.7.vsix\n</code></pre>"},{"location":"development/#documentation","title":"Documentation","text":"<p>To serve documentation locally:</p> <pre><code>python -m mkdocs serve\n</code></pre> <p>To deploy documentation:</p> <pre><code>python -m mkdocs gh-deploy\n</code></pre>"},{"location":"feature-checklist/","title":"Feature Checklist","text":"<p>This document tracks the status of features based on the Specification criteria. Each feature must meet these requirements before being accepted into the project.</p>"},{"location":"feature-checklist/#feature-requirements-checklist","title":"Feature Requirements Checklist","text":""},{"location":"feature-checklist/#1-core-functionality-assessment","title":"1. Core Functionality Assessment","text":"<ul> <li>[ ] Aligns with Hix's primary goal of code generation</li> <li>[ ] Solves a common code generation problem</li> <li>[ ] Maintains backward compatibility</li> <li>[ ] Has clear use cases documented</li> <li>[ ] Provides value to majority of users</li> </ul>"},{"location":"feature-checklist/#2-technical-feasibility","title":"2. Technical Feasibility","text":"<ul> <li>[ ] Architecture impact assessment completed</li> <li>[ ] Performance impact analyzed</li> <li>[ ] Testability plan created</li> <li>[ ] Dependencies identified</li> <li>[ ] Security implications reviewed</li> </ul>"},{"location":"feature-checklist/#3-documentation","title":"3. Documentation","text":"<ul> <li>[ ] Feature specification written</li> <li>[ ] API documentation updated</li> <li>[ ] Usage examples provided</li> <li>[ ] Migration guide (if breaking change)</li> <li>[ ] Release notes prepared</li> </ul>"},{"location":"feature-checklist/#4-implementation","title":"4. Implementation","text":"<ul> <li>[ ] Unit tests written</li> <li>[ ] Integration tests added</li> <li>[ ] Performance benchmarks included</li> <li>[ ] Error handling implemented</li> <li>[ ] Logging added where appropriate</li> </ul>"},{"location":"feature-checklist/#5-review","title":"5. Review","text":"<ul> <li>[ ] Code review completed</li> <li>[ ] Documentation review done</li> <li>[ ] Security review passed</li> <li>[ ] Performance review passed</li> <li>[ ] Community feedback addressed</li> </ul>"},{"location":"feature-checklist/#current-features-status","title":"Current Features Status","text":""},{"location":"feature-checklist/#template-inheritance","title":"Template Inheritance","text":"<ul> <li>[x] Core Functionality Assessment</li> <li>[x] Technical Feasibility</li> <li>[ ] Documentation</li> <li>[ ] Implementation</li> <li>[ ] Review</li> </ul>"},{"location":"feature-checklist/#custom-functions","title":"Custom Functions","text":"<ul> <li>[x] Core Functionality Assessment</li> <li>[x] Technical Feasibility</li> <li>[ ] Documentation</li> <li>[ ] Implementation</li> <li>[ ] Review</li> </ul>"},{"location":"feature-checklist/#model-validation","title":"Model Validation","text":"<ul> <li>[x] Core Functionality Assessment</li> <li>[ ] Technical Feasibility</li> <li>[ ] Documentation</li> <li>[ ] Implementation</li> <li>[ ] Review</li> </ul>"},{"location":"feature-checklist/#multiple-output-formats","title":"Multiple Output Formats","text":"<ul> <li>[x] Core Functionality Assessment</li> <li>[ ] Technical Feasibility</li> <li>[ ] Documentation</li> <li>[ ] Implementation</li> <li>[ ] Review</li> </ul>"},{"location":"feature-checklist/#how-to-use-this-checklist","title":"How to Use This Checklist","text":"<ol> <li>Create a new section for your feature</li> <li>Copy the requirements checklist</li> <li>Update status as you progress</li> <li>Mark items as complete when requirements are met</li> <li>Submit PR when all items are checked</li> </ol>"},{"location":"feature-checklist/#review-process","title":"Review Process","text":"<ol> <li>Initial Review</li> <li>Check Core Functionality items</li> <li>Verify Technical Feasibility</li> <li> <p>Review documentation plan</p> </li> <li> <p>Implementation Review</p> </li> <li>Verify all tests are written</li> <li>Check performance benchmarks</li> <li> <p>Review error handling</p> </li> <li> <p>Final Review</p> </li> <li>Verify all checklist items</li> <li>Check documentation completeness</li> <li>Confirm backward compatibility</li> </ol>"},{"location":"feature-checklist/#notes","title":"Notes","text":"<ul> <li>Features must meet all requirements before being merged</li> <li>Partial implementations can be submitted as draft PRs</li> <li>Community feedback is encouraged at all stages</li> <li>Security and performance are non-negotiable requirements </li> </ul>"},{"location":"getting-started/","title":"Getting Started with Hix","text":"<p>This guide will help you get started with Hix in just a few minutes. We'll create a simple example that generates a C# class from a JSON model.</p>"},{"location":"getting-started/#1-install-hix","title":"1. Install Hix","text":"<p>Choose your preferred installation method:</p> <pre><code># Using Homebrew (macOS/Linux)\nbrew install hix\n\n# Using Chocolatey (Windows)\nchoco install hix\n\n# Using Nix\nnix-env -i hix\n</code></pre>"},{"location":"getting-started/#2-create-a-simple-model","title":"2. Create a Simple Model","text":"<p>Create a file named <code>Person.json</code> with this content:</p> <pre><code>{\n  \"className\": \"Person\",\n  \"properties\": [\n    { \"name\": \"Name\", \"type\": \"string\" },\n    { \"name\": \"Age\", \"type\": \"int\" }\n  ]\n}\n</code></pre>"},{"location":"getting-started/#3-create-a-template","title":"3. Create a Template","text":"<p>Create a file named <code>Person.cs.hix</code> with this content:</p> <pre><code>public class [[model.className]] {\n[[prop]]\n    public [[prop.type]] [[prop.name]] { get; set; }\n[[/prop]]\n}\n</code></pre>"},{"location":"getting-started/#4-generate-the-code","title":"4. Generate the Code","text":"<p>Run Hix with your template and model:</p> <pre><code>hix Person.cs.hix Person.json\n</code></pre> <p>This will generate a <code>Person.cs</code> file with this content:</p> <pre><code>public class Person {\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about template syntax</li> <li>See real-world examples</li> <li>Explore advanced features </li> </ul>"},{"location":"grammar/","title":"Syntax Highlighting Grammar","text":"<p>Hix provides a grammar generator for editors like VS Code or Sublime Text using the TextMate format.</p>"},{"location":"grammar/#generating-the-grammar","title":"Generating the Grammar","text":"<p>Run the following command:</p> <pre><code>hix --gen-grammar hix.tmLanguage.json\n</code></pre> <p>This generates a <code>hix.tmLanguage.json</code> file that can be used in editor extensions or custom themes.</p>"},{"location":"grammar/#supported-tokens","title":"Supported Tokens","text":"<p>Hix grammar supports the following highlights:</p> <ul> <li><code>[[prop]]</code>, <code>[[/prop]]</code>: property block keywords</li> <li><code>[[if ...]]</code>, <code>[[else]]</code>, <code>[[/if]]</code>: conditional blocks</li> <li><code>[[prop.name]]</code>, <code>[[prop.type]]</code>, <code>[[model.className]]</code>: variables</li> <li><code>[[upper ...]]</code>, <code>[[lower ...]]</code>, <code>[[snake_case ...]]</code>: functions</li> </ul>"},{"location":"grammar/#using-in-vs-code","title":"Using in VS Code","text":"<ol> <li>Copy <code>hix.tmLanguage.json</code> into your VS Code extension or custom grammar folder</li> <li>Add it to the <code>contributes.grammars</code> section of your <code>package.json</code></li> <li>Reload your editor</li> </ol>"},{"location":"grammar/#future-plans","title":"Future Plans","text":"<ul> <li>Language Server Protocol (LSP) support</li> <li>Live preview pane for rendered templates</li> <li>Validation &amp; auto-completion</li> </ul>"},{"location":"missing-link/","title":"Hix: The Missing Link Between AI and Human-Driven Software Design","text":"<p>Why Hix is more than just a code generator \u2014 it's the foundation for a new kind of human-AI collaboration.</p> <p>AI has come a long way in helping developers write code. It can generate functions, explain errors, suggest changes, and even write small applications. But when it comes to building real-world software \u2014 with consistent architecture, opinionated structure, and long-term maintainability \u2014 AI still needs guidance.</p> <p>That guidance is human intuition, design, and intention.</p> <p>Hix is the layer that bridges this gap.</p>"},{"location":"missing-link/#the-problem-ai-is-great-at-code-but-not-at-structure","title":"The Problem: AI Is Great at Code, But Not at Structure","text":"<p>You can ask an AI to build a <code>Customer</code> model, and it will likely give you a class. Maybe even a basic form or a handler. But it won\u2019t:</p> <ul> <li>Place the files where your team expects them</li> <li>Follow your naming conventions</li> <li>Generate tests in the right style</li> <li>Match your framework, architecture, or language patterns</li> </ul> <p>That\u2019s where Hix shines.</p>"},{"location":"missing-link/#the-solution-humans-define-the-architecture-ai-fills-the-gaps","title":"The Solution: Humans Define the Architecture, AI Fills the Gaps","text":"<p>With Hix, humans define the templates \u2014 a set of reusable, structured patterns that represent how your team wants code to be written.</p> <p>Then, AI can generate or receive a model (like a <code>User</code>, <code>Order</code>, or <code>Product</code>) and use those templates to generate all the code you need:</p> <pre><code>hix model.py.hix Product.json &gt; backend/models/product.py\nhix form.html.hix Product.json &gt; frontend/forms/product.html\nhix api.ts.hix Product.json &gt; frontend/api/product.ts\n</code></pre> <p>One model \u2192 multiple consistent files across your stack.</p>"},{"location":"missing-link/#real-world-collaboration-loop","title":"Real-World Collaboration Loop","text":"<ol> <li>Developer defines templates once using Hix</li> <li>AI creates or receives model definitions from a prompt or spec</li> <li>Hix generates consistent code across multiple layers</li> <li>Developer reviews, adjusts, and commits \u2014 fast, confidently</li> </ol> <p>It\u2019s the best of both worlds: - AI brings speed and iteration - Humans bring standards and strategy</p>"},{"location":"missing-link/#example-describe-a-model-to-ai","title":"Example: Describe a Model to AI","text":"<p>\u201cCreate a <code>SubscriptionPlan</code> model with <code>Id</code>, <code>Name</code>, <code>Price</code>, and <code>IsRecurring</code>. Use existing templates.\u201d</p> <p>AI writes <code>SubscriptionPlan.json</code>, then:</p> <pre><code>hix backend.hix SubscriptionPlan.json &gt; models/subscription_plan.py\nhix frontend-form.hix SubscriptionPlan.json &gt; templates/subscription_form.html\n</code></pre> <p>All files follow the structure your team expects \u2014 ready to ship or iterate.</p>"},{"location":"missing-link/#why-this-matters","title":"Why This Matters","text":"<ul> <li>\ud83e\udde0 Human intent stays encoded in templates</li> <li>\u26a1 AI accelerates model-driven generation</li> <li>\ud83e\uddf1 Architecture becomes reusable, reliable, and team-aligned</li> <li>\ud83d\udd04 Collaboration scales, not chaos</li> </ul> <p>Hix doesn\u2019t compete with AI \u2014 it empowers it. It brings the design layer AI has been missing.</p>"},{"location":"missing-link/#call-to-action","title":"Call to Action","text":"<p>Try it in your own stack. Build templates once. Feed in models with AI. And let Hix do the rest.</p> <p>\ud83d\udc49 Download Hix \ud83d\udcd6 Read the Docs \u2b50\ufe0f Star it on GitHub</p> <p>\u201cBuild once. Template forever. Let Hix do the repetition.\u201d</p>"},{"location":"real-world-usecase/","title":"Real-World Use Case: Full Stack Model Automation","text":"<p>Hix was designed to solve a very common problem in modern development: reducing boilerplate when creating new screens or entities across a full stack application.</p>"},{"location":"real-world-usecase/#the-problem","title":"The Problem","text":"<p>When you add a new feature like a <code>Customer</code> or <code>Product</code>, you often have to:</p> <ul> <li>Create a backend model class</li> <li>Write a database table or ORM definition</li> <li>Build a REST API handler</li> <li>Create an HTML form</li> <li>Add JS for validation or interactivity</li> <li>Define styles, test files, etc.</li> </ul> <p>That's 5\u201310 files per model, most of which follow a repeatable structure.</p>"},{"location":"real-world-usecase/#the-hix-solution","title":"The Hix Solution","text":"<p>Hix lets you define templates for each type of file \u2014 HTML, Python, TypeScript, SQL, etc. Then, with a single command, it can generate all those files for a given model.</p>"},{"location":"real-world-usecase/#example","title":"Example:","text":"<p>Given: - <code>Customer.json</code> (model) - Templates:   - <code>customer.model.py.hix</code>   - <code>customer.form.html.hix</code>   - <code>customer.api.js.hix</code>   - <code>customer.sql.hix</code></p> <p>You can run:</p> <pre><code>hix customer.model.py.hix Customer.json &gt; src/models/customer.py\nhix customer.form.html.hix Customer.json &gt; frontend/forms/customer.html\nhix customer.api.js.hix Customer.json &gt; api/customer.js\nhix customer.sql.hix Customer.json &gt; migrations/create_customer.sql\n</code></pre> <p>Or automate it with a script.</p>"},{"location":"real-world-usecase/#bash-script-example","title":"Bash Script Example","text":"<pre><code>#!/bin/bash\nMODEL=$1\n\nhix templates/model.py.hix models/$MODEL.json &gt; output/$MODEL.py\nhix templates/form.html.hix models/$MODEL.json &gt; output/$MODEL.html\nhix templates/api.js.hix models/$MODEL.json &gt; output/$MODEL.js\nhix templates/schema.sql.hix models/$MODEL.json &gt; output/$MODEL.sql\n</code></pre> <p>Usage:</p> <pre><code>./generate.sh Customer\n</code></pre>"},{"location":"real-world-usecase/#powershell-example","title":"PowerShell Example","text":"<pre><code>param([string]$Model)\n\nhix templates\\model.py.hix models\\$Model.json &gt; output\\$Model.py\nhix templates\\form.html.hix models\\$Model.json &gt; output\\$Model.html\nhix templates\\api.js.hix models\\$Model.json &gt; output\\$Model.js\nhix templates\\schema.sql.hix models\\$Model.json &gt; output\\$Model.sql\n</code></pre> <p>Usage:</p> <pre><code>.\\generate.ps1 -Model Customer\n</code></pre>"},{"location":"real-world-usecase/#benefits","title":"Benefits","text":"<ul> <li>\ud83d\udd01 Consistent code structure across files and teams</li> <li>\ud83e\udde0 Fewer manual errors when creating boilerplate</li> <li>\u26a1 Fast prototyping of new modules or features</li> <li>\ud83e\udde9 Decouples templates from data so you can focus on the logic</li> </ul> <p>With Hix, you design your code scaffolding once \u2014 and reuse it forever.</p>"},{"location":"roadmap/","title":"Hix Roadmap","text":"<p>This roadmap outlines the planned features and improvements for Hix, organized by priority and implementation status.</p>"},{"location":"roadmap/#current-version-020","title":"Current Version (0.2.0)","text":""},{"location":"roadmap/#core-features","title":"Core Features","text":"<ul> <li>\u2705 Basic template parsing</li> <li>\u2705 JSON model processing</li> <li>\u2705 Simple code generation</li> <li>\u2705 Command-line interface</li> </ul>"},{"location":"roadmap/#high-priority-features","title":"High Priority Features","text":"<ul> <li>\ud83d\udd04 Template inheritance</li> <li>\ud83d\udd04 Custom functions in templates</li> <li>\ud83d\udd04 Model validation</li> <li>\ud83d\udd04 Error handling improvements</li> </ul>"},{"location":"roadmap/#medium-priority-features","title":"Medium Priority Features","text":"<ul> <li>\u23f3 Multiple output formats</li> <li>\u23f3 Template caching</li> <li>\u23f3 Performance optimizations</li> <li>\u23f3 Enhanced documentation</li> </ul>"},{"location":"roadmap/#low-priority-features","title":"Low Priority Features","text":"<ul> <li>\ud83d\udccb IDE integration</li> <li>\ud83d\udccb Web interface</li> <li>\ud83d\udccb Template marketplace</li> <li>\ud83d\udccb Advanced model transformations</li> </ul>"},{"location":"roadmap/#future-versions","title":"Future Versions","text":""},{"location":"roadmap/#version-030-next-release","title":"Version 0.3.0 (Next Release)","text":"<ul> <li>Template inheritance</li> <li>Custom functions</li> <li>Improved error messages</li> <li>Performance benchmarks</li> </ul>"},{"location":"roadmap/#version-040","title":"Version 0.4.0","text":"<ul> <li>Multiple output formats</li> <li>Template caching</li> <li>Enhanced documentation</li> <li>Community templates</li> </ul>"},{"location":"roadmap/#version-100","title":"Version 1.0.0","text":"<ul> <li>Major architecture improvements</li> <li>Plugin system</li> <li>Advanced model processing</li> <li>Full IDE integration</li> </ul>"},{"location":"roadmap/#feature-status-legend","title":"Feature Status Legend","text":"<ul> <li>\u2705 Implemented</li> <li>\ud83d\udd04 In Progress</li> <li>\u23f3 Planned</li> <li>\ud83d\udccb Under Consideration</li> </ul>"},{"location":"roadmap/#contributing","title":"Contributing","text":"<p>New features are selected based on the Specification document. If you'd like to propose a new feature:</p> <ol> <li>Check if it aligns with Hix's goals</li> <li>Create a GitHub Issue with detailed proposal</li> <li>Follow the feature implementation process</li> <li>Submit a pull request when ready</li> </ol>"},{"location":"roadmap/#community-feedback","title":"Community Feedback","text":"<p>We welcome community input on the roadmap. Please: - Comment on existing issues - Create new feature requests - Participate in discussions - Share your use cases</p>"},{"location":"roadmap/#completed-in-v01","title":"\u2705 Completed in v0.1","text":"<ul> <li><code>[[prop]]</code> and filters</li> <li><code>[[if]]</code> / <code>[[else]]</code> conditionals</li> <li><code>[[upper]]</code>, <code>[[lower]]</code>, <code>[[snake_case]]</code> functions</li> <li>AST-based rendering</li> <li>Golden tests</li> <li>Grammar generation for syntax highlighting</li> <li>Windows installer with wizard UI and PATH integration</li> </ul>"},{"location":"roadmap/#planned-for-v02","title":"\ud83e\udde9 Planned for v0.2","text":"<ul> <li><code>[[include filename]]</code> for reusable template parts</li> <li>Configurable output file paths via CLI</li> <li>Command-line options: <code>--out</code>, <code>--format</code>, <code>--verbose</code></li> <li>More filters (e.g., <code>prop.required=true</code>)</li> <li>Real comment support in templates</li> </ul>"},{"location":"roadmap/#testing-ci","title":"\ud83e\uddea Testing &amp; CI","text":"<ul> <li>GitHub Actions for auto-testing PRs</li> <li>Validate golden outputs</li> <li>Run on Windows/Linux builds</li> </ul>"},{"location":"roadmap/#stretch-goals","title":"\ud83e\udde0 Stretch Goals","text":"<ul> <li>Language Server Protocol (LSP) integration</li> <li>VS Code extension</li> <li>Live preview while editing templates</li> <li>Web-based playground UI</li> </ul> <p>Have an idea? Open an issue or submit a PR!</p>"},{"location":"specification/","title":"Hix Specification","text":"<p>This document outlines the specification and feature selection process for Hix.</p>"},{"location":"specification/#feature-selection-process","title":"Feature Selection Process","text":"<p>Features in Hix are selected based on the following criteria:</p> <ol> <li>Core Functionality</li> <li>Must align with Hix's primary goal of code generation</li> <li>Should solve a common code generation problem</li> <li> <p>Must maintain backward compatibility</p> </li> <li> <p>Implementation Priority</p> </li> <li>High: Critical for basic functionality</li> <li>Medium: Enhances existing features</li> <li> <p>Low: Nice-to-have features</p> </li> <li> <p>Technical Feasibility</p> </li> <li>Must be implementable within the current architecture</li> <li>Should not compromise performance</li> <li>Must be testable</li> </ol>"},{"location":"specification/#architecture-specification","title":"Architecture Specification","text":""},{"location":"specification/#parser","title":"Parser","text":"<ul> <li>Handles template syntax parsing</li> <li>Supports nested expressions</li> <li>Maintains context for variable substitution</li> <li>Validates template syntax</li> </ul>"},{"location":"specification/#model-processor","title":"Model Processor","text":"<ul> <li>Validates JSON model structure</li> <li>Processes model transformations</li> <li>Handles type conversions</li> <li>Supports model inheritance</li> </ul>"},{"location":"specification/#template-engine","title":"Template Engine","text":"<ul> <li>Renders templates with model data</li> <li>Supports conditional logic</li> <li>Handles loops and iterations</li> <li>Manages output formatting</li> </ul>"},{"location":"specification/#feature-implementation-process","title":"Feature Implementation Process","text":"<ol> <li>Proposal</li> <li>Feature is proposed in GitHub Issues</li> <li>Community discussion and feedback</li> <li> <p>Technical review by maintainers</p> </li> <li> <p>Specification</p> </li> <li>Detailed technical specification</li> <li>API design</li> <li>Backward compatibility analysis</li> <li> <p>Performance impact assessment</p> </li> <li> <p>Implementation</p> </li> <li>Development in feature branch</li> <li>Unit tests</li> <li>Documentation updates</li> <li> <p>Performance benchmarks</p> </li> <li> <p>Review</p> </li> <li>Code review</li> <li>Documentation review</li> <li>Performance review</li> <li> <p>Security review</p> </li> <li> <p>Release</p> </li> <li>Version bump</li> <li>Release notes</li> <li>Documentation updates</li> <li>Community announcement</li> </ol>"},{"location":"specification/#versioning","title":"Versioning","text":"<p>Hix follows semantic versioning (MAJOR.MINOR.PATCH):</p> <ul> <li>MAJOR: Breaking changes</li> <li>MINOR: New features, backward compatible</li> <li>PATCH: Bug fixes, backward compatible</li> </ul>"},{"location":"specification/#backward-compatibility","title":"Backward Compatibility","text":"<ul> <li>Breaking changes require MAJOR version bump</li> <li>Deprecated features are marked in documentation</li> <li>Migration guides provided for breaking changes</li> <li>Support for older versions maintained for 6 months </li> </ul>"},{"location":"templates/","title":"Template Syntax","text":"<p>Hix templates support a rich tag syntax for rendering model-based structures. Tags are enclosed in double square brackets <code>[[ ]]</code>.</p>"},{"location":"templates/#model-tags","title":"Model Tags","text":"<ul> <li><code>[[model.className]]</code>: Injects the model's class name.</li> </ul>"},{"location":"templates/#property-tags-inside-prop","title":"Property Tags (inside <code>[[prop]]</code>)","text":"<ul> <li><code>[[prop.name]]</code>: Injects the name of the property</li> <li><code>[[prop.type]]</code>: Injects the property type</li> </ul>"},{"location":"templates/#control-flow","title":"Control Flow","text":""},{"location":"templates/#loops","title":"Loops","text":"<pre><code>[[prop]]\n  [[prop.type]] [[prop.name]];\n[[/prop]]\n</code></pre>"},{"location":"templates/#optional-filters","title":"Optional filters:","text":"<pre><code>[[prop type=bool]]\n[[prop ignore=Id]]\n</code></pre>"},{"location":"templates/#conditionals","title":"Conditionals","text":"<pre><code>[[if prop.type=bool]]\n  // do something\n[[else]]\n  // do something else\n[[/if]]\n</code></pre>"},{"location":"templates/#functions","title":"Functions","text":"<p>Apply transformations to values:</p> <pre><code>[[upper prop.name]]     =&gt; MYFIELD\n[[lower prop.name]]     =&gt; myfield\n[[snake_case prop.name]] =&gt; my_field\n</code></pre>"},{"location":"templates/#comments","title":"Comments","text":"<p>Hix doesn't support comments in template syntax directly yet, but you can use:</p> <pre><code>// [[prop.name]] is the name of the field\n</code></pre>"},{"location":"templates/#example-template","title":"Example Template","text":"<pre><code>public class [[model.className]] {\n[[prop]]\n  [[if prop.type=bool]]\n    public bool [[prop.name]];\n  [[else]]\n    public [[prop.type]] [[prop.name]];\n  [[/if]]\n[[/prop]]\n}\n</code></pre>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide explains how to use Hix for code generation in your projects.</p>"},{"location":"usage/#installation","title":"Installation","text":"<p>Hix can be installed through various package managers:</p>"},{"location":"usage/#using-homebrew-macoslinux","title":"Using Homebrew (macOS/Linux)","text":"<pre><code>brew install hix\n</code></pre>"},{"location":"usage/#using-chocolatey-windows","title":"Using Chocolatey (Windows)","text":"<pre><code>choco install hix\n</code></pre>"},{"location":"usage/#using-nix","title":"Using Nix","text":"<pre><code>nix-env -i hix\n</code></pre>"},{"location":"usage/#using-docker","title":"Using Docker","text":"<pre><code>docker pull hix/hix\n</code></pre>"},{"location":"usage/#manual-installation","title":"Manual Installation","text":"<p>Download the latest release from the releases page and add it to your PATH.</p>"},{"location":"usage/#project-setup","title":"Project Setup","text":""},{"location":"usage/#initialize-a-new-project","title":"Initialize a New Project","text":"<pre><code>mkdir my-project\ncd my-project\nhix init\n</code></pre> <p>This creates the following structure:</p> <pre><code>.hix/\n\u251c\u2500\u2500 config.yaml           # Configuration file\n\u251c\u2500\u2500 .gitignore           # Git ignore rules for generated files\n\u251c\u2500\u2500 models/              # Directory for model files\n\u251c\u2500\u2500 output/              # Directory for generated code\n\u2502   \u251c\u2500\u2500 Domain/         # Domain layer output\n\u2502   \u251c\u2500\u2500 Application/    # Application layer output\n\u2502   \u251c\u2500\u2500 Infrastructure/ # Infrastructure layer output\n\u2502   \u2514\u2500\u2500 Presentation/   # Presentation layer output\n\u2514\u2500\u2500 templates/          # Directory for template files\n</code></pre>"},{"location":"usage/#basic-usage","title":"Basic Usage","text":""},{"location":"usage/#1-create-a-model","title":"1. Create a Model","text":"<p>Create a JSON file describing your model:</p> <pre><code>{\n  \"className\": \"User\",\n  \"properties\": [\n    { \"name\": \"Id\", \"type\": \"int\" },\n    { \"name\": \"Name\", \"type\": \"string\" },\n    { \"name\": \"Email\", \"type\": \"string\" }\n  ]\n}\n</code></pre>"},{"location":"usage/#2-generate-code","title":"2. Generate Code","text":"<p>Run Hix with your model file:</p> <pre><code>hix User.json\n</code></pre> <p>This will: 1. Load the model from <code>User.json</code> 2. Read the configuration from <code>.hix/config.yaml</code> 3. Generate code for each layer according to the templates 4. Output the generated files in their respective layer directories</p>"},{"location":"usage/#advanced-usage","title":"Advanced Usage","text":""},{"location":"usage/#interactive-mode","title":"Interactive Mode","text":"<p>If you run Hix without arguments, it will prompt you for the model name:</p> <pre><code>hix\n# Then enter the model name when prompted\n</code></pre>"},{"location":"usage/#help-and-documentation","title":"Help and Documentation","text":"<ul> <li>Show basic help: <code>hix help</code> or <code>hix --help</code></li> <li>Show detailed manual: <code>hix man</code></li> <li>Show version: <code>hix version</code> or <code>hix --version</code></li> </ul>"},{"location":"usage/#customizing-configuration","title":"Customizing Configuration","text":"<p>Edit <code>.hix/config.yaml</code> to customize: - Architecture type (clean, onion, hexagonal) - Output paths - Layer configurations - Template mappings</p>"},{"location":"usage/#examples","title":"Examples","text":""},{"location":"usage/#generate-a-domain-entity","title":"Generate a Domain Entity","text":"<ol> <li>Create a model file <code>User.json</code>:</li> </ol> <pre><code>{\n  \"className\": \"User\",\n  \"properties\": [\n    { \"name\": \"Id\", \"type\": \"int\" },\n    { \"name\": \"Name\", \"type\": \"string\" }\n  ]\n}\n</code></pre> <ol> <li>Run Hix:</li> </ol> <pre><code>hix User.json\n</code></pre> <ol> <li>Check the generated files in <code>.hix/output/Domain/</code></li> </ol>"},{"location":"usage/#using-templates","title":"Using Templates","text":"<ol> <li>Create a template in <code>.hix/templates/domain/Entity.hix</code>:</li> </ol> <pre><code>public class [[model.className]] {\n[[prop]]\n  private [[prop.type]] [[prop.name]];\n[[/prop]]\n}\n</code></pre> <ol> <li>Add the template to your config:</li> </ol> <pre><code>layers:\n  - name: Domain\n    path: ./src/Domain\n    templates:\n      - name: Entity\n        filename: [[model.name]].java\n        template: templates/domain/Entity.hix\n</code></pre> <ol> <li>Generate code:</li> </ol> <pre><code>hix User.json\n</code></pre>"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"usage/#common-issues","title":"Common Issues","text":"<ol> <li>Model Not Found</li> <li>Ensure the model file exists and is in the correct location</li> <li> <p>Check file permissions</p> </li> <li> <p>Configuration Errors</p> </li> <li>Verify <code>config.yaml</code> syntax</li> <li> <p>Check template paths are correct</p> </li> <li> <p>Template Errors</p> </li> <li>Check template syntax</li> <li>Verify all required model fields are present</li> </ol>"},{"location":"usage/#getting-help","title":"Getting Help","text":"<ul> <li>Use <code>hix help</code> for basic command information</li> <li>Use <code>hix man</code> for detailed documentation</li> <li>Check the documentation for more information</li> <li>Report issues on our GitHub repository</li> </ul>"},{"location":"usage/#running-hix","title":"Running Hix","text":"<p>Before running the command, make sure you have created two files:</p> <ul> <li><code>template.hix</code>: your Hix template</li> <li><code>model.json</code>: your input data model</li> </ul> <p>Once installed, you can use Hix via the command line to render templates with your model data:</p> <pre><code>hix template.hix model.json\n</code></pre> <p>This will parse <code>template.hix</code>, apply values from <code>model.json</code>, and output the result to your terminal.</p>"},{"location":"usage/#example-input-files","title":"Example Input Files","text":""},{"location":"usage/#modeljson","title":"model.json","text":"<pre><code>{\n  \"className\": \"User\",\n  \"properties\": [\n    { \"name\": \"Name\", \"type\": \"string\" },\n    { \"name\": \"IsAdmin\", \"type\": \"bool\" }\n  ]\n}\n</code></pre>"},{"location":"usage/#templatehix","title":"template.hix","text":"<pre><code>public class [[model.className]] {\n[[prop]]\n  [[if prop.type=bool]]\n    public bool [[prop.name]];\n  [[else]]\n    public [[prop.type]] [[snake_case prop.name]];\n  [[/if]]\n[[/prop]]\n}\n</code></pre>"},{"location":"usage/#output","title":"Output","text":"<pre><code>public class User {\n  public string name;\n  public bool IsAdmin;\n}\n</code></pre>"},{"location":"usage/#command-line-arguments","title":"Command-Line Arguments","text":"<p>When you run <code>hix template.hix model.json</code>, the tool uses:</p> <ul> <li>The template file's extension (e.g., <code>.hix</code>, <code>.cs.hix</code>, <code>.html.hix</code>) to determine the output file extension.</li> <li>The model's <code>className</code> as the base name for the output file.</li> </ul> <p>For example:</p> <pre><code>hix template.cs.hix Person.json\n</code></pre> <p>Will produce:</p> <pre><code>Person.cs\n</code></pre> <p>The CLI accepts two positional arguments:</p> <p>The CLI accepts two positional arguments:</p> <ol> <li>template file (e.g. <code>template.hix</code>)</li> <li>model file (e.g. <code>model.json</code>)</li> </ol>"},{"location":"usage/#windows-installer-support","title":"Windows Installer Support","text":"<p>If you installed Hix using the Windows setup wizard, the <code>hix</code> command will be available in any terminal.</p> <p>You may need to restart your terminal session after installation to ensure the <code>PATH</code> update is active.</p>"}]}